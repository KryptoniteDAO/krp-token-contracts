{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "UserInfosResponse",
  "type": "object",
  "required": [
    "user_state"
  ],
  "properties": {
    "user_state": {
      "$ref": "#/definitions/TreasureUserState"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "TreasureUserState": {
      "type": "object",
      "required": [
        "current_dust_amount",
        "current_locked_amount",
        "current_unlock_amount",
        "last_lock_time",
        "last_unlock_time",
        "lose_nft_num",
        "total_cost_dust_amount",
        "total_locked_amount",
        "total_punish_amount",
        "total_unlock_amount",
        "total_withdraw_amount",
        "win_nft_num"
      ],
      "properties": {
        "current_dust_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "current_locked_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "current_unlock_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "last_lock_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "last_unlock_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "lose_nft_num": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "total_cost_dust_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "total_locked_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "total_punish_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "total_unlock_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "total_withdraw_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "win_nft_num": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
