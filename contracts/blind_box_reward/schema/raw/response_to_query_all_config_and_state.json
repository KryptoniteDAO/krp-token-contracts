{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AllConfigAndStateResponse",
  "type": "object",
  "required": [
    "box_config",
    "box_state",
    "config"
  ],
  "properties": {
    "box_config": {
      "$ref": "#/definitions/BoxRewardConfig"
    },
    "box_state": {
      "$ref": "#/definitions/BoxRewardConfigState"
    },
    "config": {
      "$ref": "#/definitions/RewardConfig"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "BoxRewardConfig": {
      "type": "object",
      "required": [
        "box_open_time",
        "box_reward_token",
        "ordinary_box_reward_level_config",
        "random_box_reward_rule_config",
        "random_in_box_level_index"
      ],
      "properties": {
        "box_open_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "box_reward_token": {
          "$ref": "#/definitions/Addr"
        },
        "ordinary_box_reward_level_config": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/OrdinaryBoxRewardLevelConfig"
          }
        },
        "random_box_reward_rule_config": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RandomBoxRewardRuleConfig"
          }
        },
        "random_in_box_level_index": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        }
      }
    },
    "BoxRewardConfigState": {
      "type": "object",
      "required": [
        "ordinary_box_reward_level_config_state",
        "ordinary_total_open_box_count",
        "ordinary_total_reward_amount",
        "random_box_reward_rule_config_state",
        "random_total_open_box_count",
        "random_total_reward_amount"
      ],
      "properties": {
        "ordinary_box_reward_level_config_state": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/OrdinaryBoxRewardLevelConfigState"
          }
        },
        "ordinary_total_open_box_count": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "ordinary_total_reward_amount": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "random_box_reward_rule_config_state": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RandomBoxRewardRuleConfigState"
          }
        },
        "random_total_open_box_count": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "random_total_reward_amount": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        }
      }
    },
    "OrdinaryBoxRewardLevelConfig": {
      "type": "object",
      "required": [
        "max_reward_count",
        "reward_amount"
      ],
      "properties": {
        "max_reward_count": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "reward_amount": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        }
      }
    },
    "OrdinaryBoxRewardLevelConfigState": {
      "type": "object",
      "required": [
        "total_open_box_count",
        "total_reward_amount"
      ],
      "properties": {
        "total_open_box_count": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "total_reward_amount": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        }
      }
    },
    "RandomBoxRewardRuleConfig": {
      "type": "object",
      "required": [
        "max_reward_count",
        "random_box_index",
        "random_reward_amount",
        "random_total_count"
      ],
      "properties": {
        "max_reward_count": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "random_box_index": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "random_reward_amount": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "random_total_count": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "RandomBoxRewardRuleConfigState": {
      "type": "object",
      "required": [
        "total_open_box_count",
        "total_reward_amount"
      ],
      "properties": {
        "total_open_box_count": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "total_reward_amount": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        }
      }
    },
    "RewardConfig": {
      "type": "object",
      "required": [
        "gov",
        "nft_contract"
      ],
      "properties": {
        "gov": {
          "$ref": "#/definitions/Addr"
        },
        "nft_contract": {
          "$ref": "#/definitions/Addr"
        }
      }
    }
  }
}
