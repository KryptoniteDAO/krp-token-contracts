{
  "contract_name": "blind_box",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "name",
      "nft_base_url",
      "nft_uri_suffix",
      "price_token",
      "receiver_price_addr",
      "symbol",
      "token_id_prefix"
    ],
    "properties": {
      "can_transfer_time": {
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      },
      "end_mint_time": {
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      },
      "gov": {
        "anyOf": [
          {
            "$ref": "#/definitions/Addr"
          },
          {
            "type": "null"
          }
        ]
      },
      "level_infos": {
        "type": [
          "array",
          "null"
        ],
        "items": {
          "$ref": "#/definitions/BlindBoxLevelMsg"
        }
      },
      "name": {
        "description": "Name of the NFT contract",
        "type": "string"
      },
      "nft_base_url": {
        "type": "string"
      },
      "nft_uri_suffix": {
        "type": "string"
      },
      "price_token": {
        "type": "string"
      },
      "receiver_price_addr": {
        "$ref": "#/definitions/Addr"
      },
      "referral_reward_config": {
        "anyOf": [
          {
            "$ref": "#/definitions/ReferralRewardConfigMsg"
          },
          {
            "type": "null"
          }
        ]
      },
      "start_mint_time": {
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      },
      "symbol": {
        "description": "Symbol of the NFT contract",
        "type": "string"
      },
      "token_id_prefix": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "BlindBoxLevelMsg": {
        "type": "object",
        "required": [
          "is_random_box",
          "mint_total_count",
          "price"
        ],
        "properties": {
          "is_random_box": {
            "type": "boolean"
          },
          "mint_total_count": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          },
          "price": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "ReferralLevelConfig": {
        "type": "object",
        "required": [
          "invitee_discount_rate",
          "inviter_reward_rate",
          "max_referral_total_amount",
          "min_referral_total_amount",
          "reward_box_config"
        ],
        "properties": {
          "invitee_discount_rate": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          },
          "inviter_reward_rate": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          },
          "max_referral_total_amount": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          },
          "min_referral_total_amount": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          },
          "reward_box_config": {
            "$ref": "#/definitions/ReferralLevelRewardBoxConfig"
          }
        }
      },
      "ReferralLevelRewardBoxConfig": {
        "type": "object",
        "required": [
          "recommended_quantity",
          "reward_box"
        ],
        "properties": {
          "recommended_quantity": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          },
          "reward_box": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      },
      "ReferralRewardConfigMsg": {
        "type": "object",
        "required": [
          "referral_level_config"
        ],
        "properties": {
          "referral_level_config": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ReferralLevelConfig"
            }
          },
          "reward_token_config": {
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {
              "$ref": "#/definitions/ReferralRewardTokenConfig"
            }
          }
        },
        "additionalProperties": false
      },
      "ReferralRewardTokenConfig": {
        "type": "object",
        "required": [
          "conversion_ratio",
          "reward_token"
        ],
        "properties": {
          "conversion_ratio": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          },
          "reward_token": {
            "type": "string"
          }
        }
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "This is like Cw721ExecuteMsg but we add a Mint command for an owner to make this stand-alone. You will likely want to remove mint and use other control logic in any contract that inherits this.",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "can_transfer_time": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "end_mint_time": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "gov": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "inviter_reward_box_contract": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Addr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "nft_base_url": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "nft_uri_suffix": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "price_token": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "receiver_price_addr": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Addr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "start_mint_time": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "token_id_prefix": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_config_level"
        ],
        "properties": {
          "update_config_level": {
            "type": "object",
            "required": [
              "index"
            ],
            "properties": {
              "index": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "mint_total_count": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint128",
                "minimum": 0.0
              },
              "price": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint128",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_reward_token_config"
        ],
        "properties": {
          "update_reward_token_config": {
            "type": "object",
            "required": [
              "conversion_ratio",
              "reward_token",
              "reward_token_type"
            ],
            "properties": {
              "conversion_ratio": {
                "type": "integer",
                "format": "uint128",
                "minimum": 0.0
              },
              "reward_token": {
                "type": "string"
              },
              "reward_token_type": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_referral_level_config"
        ],
        "properties": {
          "update_referral_level_config": {
            "type": "object",
            "required": [
              "referral_level_config_msg"
            ],
            "properties": {
              "referral_level_config_msg": {
                "$ref": "#/definitions/ReferralLevelConfigMsg"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_referral_level_box_config"
        ],
        "properties": {
          "update_referral_level_box_config": {
            "type": "object",
            "required": [
              "level_reward_box_config_msg"
            ],
            "properties": {
              "level_reward_box_config_msg": {
                "$ref": "#/definitions/ReferralLevelRewardBoxConfigMsg"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_referral_info"
        ],
        "properties": {
          "create_referral_info": {
            "type": "object",
            "required": [
              "referral_code",
              "reward_token_type"
            ],
            "properties": {
              "referral_code": {
                "type": "string"
              },
              "reward_token_type": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "modify_reward_token_type"
        ],
        "properties": {
          "modify_reward_token_type": {
            "type": "object",
            "required": [
              "reward_token_type"
            ],
            "properties": {
              "reward_token_type": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "do_inviter_reward_mint"
        ],
        "properties": {
          "do_inviter_reward_mint": {
            "type": "object",
            "required": [
              "inviter",
              "level_index",
              "mint_num"
            ],
            "properties": {
              "inviter": {
                "$ref": "#/definitions/Addr"
              },
              "level_index": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "mint_num": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "mint"
        ],
        "properties": {
          "mint": {
            "type": "object",
            "required": [
              "level_index",
              "mint_num"
            ],
            "properties": {
              "level_index": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "mint_num": {
                "type": "integer",
                "format": "uint128",
                "minimum": 0.0
              },
              "recipient": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "referral_code": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Transfer is a base message to move a token to another account without triggering actions",
        "type": "object",
        "required": [
          "transfer_nft"
        ],
        "properties": {
          "transfer_nft": {
            "type": "object",
            "required": [
              "recipient",
              "token_id"
            ],
            "properties": {
              "recipient": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Send is a base message to transfer a token to a contract and trigger an action on the receiving contract.",
        "type": "object",
        "required": [
          "send_nft"
        ],
        "properties": {
          "send_nft": {
            "type": "object",
            "required": [
              "contract",
              "msg",
              "token_id"
            ],
            "properties": {
              "contract": {
                "type": "string"
              },
              "msg": {
                "$ref": "#/definitions/Binary"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allows operator to transfer / send the token from the owner's account. If expiration is set, then this allowance has a time/height limit",
        "type": "object",
        "required": [
          "approve"
        ],
        "properties": {
          "approve": {
            "type": "object",
            "required": [
              "spender",
              "token_id"
            ],
            "properties": {
              "expires": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expiration"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "spender": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove previously granted Approval",
        "type": "object",
        "required": [
          "revoke"
        ],
        "properties": {
          "revoke": {
            "type": "object",
            "required": [
              "spender",
              "token_id"
            ],
            "properties": {
              "spender": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allows operator to transfer / send any token from the owner's account. If expiration is set, then this allowance has a time/height limit",
        "type": "object",
        "required": [
          "approve_all"
        ],
        "properties": {
          "approve_all": {
            "type": "object",
            "required": [
              "operator"
            ],
            "properties": {
              "expires": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expiration"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "operator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove previously granted ApproveAll permission",
        "type": "object",
        "required": [
          "revoke_all"
        ],
        "properties": {
          "revoke_all": {
            "type": "object",
            "required": [
              "operator"
            ],
            "properties": {
              "operator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Burn an NFT the sender has access to",
        "type": "object",
        "required": [
          "burn"
        ],
        "properties": {
          "burn": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ReferralLevelConfigMsg": {
        "type": "object",
        "required": [
          "referral_level"
        ],
        "properties": {
          "invitee_discount_rate": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint128",
            "minimum": 0.0
          },
          "inviter_reward_rate": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint128",
            "minimum": 0.0
          },
          "max_referral_total_amount": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint128",
            "minimum": 0.0
          },
          "min_referral_total_amount": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint128",
            "minimum": 0.0
          },
          "referral_level": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "ReferralLevelRewardBoxConfigMsg": {
        "type": "object",
        "required": [
          "referral_level"
        ],
        "properties": {
          "recommended_quantity": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint128",
            "minimum": 0.0
          },
          "referral_level": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "reward_box": {
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Return the owner of the given token, error if token does not exist",
        "type": "object",
        "required": [
          "owner_of"
        ],
        "properties": {
          "owner_of": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "include_expired": {
                "description": "unset or false will filter out expired approvals, you must set to true to see them",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Return operator that can access all of the owner's tokens.",
        "type": "object",
        "required": [
          "approval"
        ],
        "properties": {
          "approval": {
            "type": "object",
            "required": [
              "spender",
              "token_id"
            ],
            "properties": {
              "include_expired": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "spender": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Return approvals that a token has",
        "type": "object",
        "required": [
          "approvals"
        ],
        "properties": {
          "approvals": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "include_expired": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Return approval of a given operator for all tokens of an owner, error if not set",
        "type": "object",
        "required": [
          "operator"
        ],
        "properties": {
          "operator": {
            "type": "object",
            "required": [
              "operator",
              "owner"
            ],
            "properties": {
              "include_expired": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "operator": {
                "type": "string"
              },
              "owner": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "List all operators that can access all of the owner's tokens",
        "type": "object",
        "required": [
          "all_operators"
        ],
        "properties": {
          "all_operators": {
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "include_expired": {
                "description": "unset or false will filter out expired items, you must set to true to see them",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "owner": {
                "type": "string"
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Total number of tokens issued",
        "type": "object",
        "required": [
          "num_tokens"
        ],
        "properties": {
          "num_tokens": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "With MetaData Extension. Returns top-level metadata about the contract",
        "type": "object",
        "required": [
          "contract_info"
        ],
        "properties": {
          "contract_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "With MetaData Extension. Returns metadata about one particular token, based on *ERC721 Metadata JSON Schema* but directly from the contract",
        "type": "object",
        "required": [
          "nft_info"
        ],
        "properties": {
          "nft_info": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "With MetaData Extension. Returns the result of both `NftInfo` and `OwnerOf` as one query as an optimization for clients",
        "type": "object",
        "required": [
          "all_nft_info"
        ],
        "properties": {
          "all_nft_info": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "include_expired": {
                "description": "unset or false will filter out expired approvals, you must set to true to see them",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "With Enumerable extension. Returns all tokens owned by the given address, [] if unset.",
        "type": "object",
        "required": [
          "tokens"
        ],
        "properties": {
          "tokens": {
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "owner": {
                "type": "string"
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "With Enumerable extension. Requires pagination. Lists all token_ids controlled by the contract.",
        "type": "object",
        "required": [
          "all_tokens"
        ],
        "properties": {
          "all_tokens": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Return the minter",
        "type": "object",
        "required": [
          "minter"
        ],
        "properties": {
          "minter": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "query_blind_box_config"
        ],
        "properties": {
          "query_blind_box_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "query_blind_box_config_level"
        ],
        "properties": {
          "query_blind_box_config_level": {
            "type": "object",
            "required": [
              "index"
            ],
            "properties": {
              "index": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "query_blind_box_info"
        ],
        "properties": {
          "query_blind_box_info": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "query_blind_box_infos"
        ],
        "properties": {
          "query_blind_box_infos": {
            "type": "object",
            "required": [
              "token_ids"
            ],
            "properties": {
              "token_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "query_all_referral_reward_config"
        ],
        "properties": {
          "query_all_referral_reward_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "query_inviter_records"
        ],
        "properties": {
          "query_inviter_records": {
            "type": "object",
            "required": [
              "inviter"
            ],
            "properties": {
              "inviter": {
                "$ref": "#/definitions/Addr"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Addr"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "cal_mint_info"
        ],
        "properties": {
          "cal_mint_info": {
            "type": "object",
            "required": [
              "level_index",
              "mint_num"
            ],
            "properties": {
              "level_index": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "mint_num": {
                "$ref": "#/definitions/Uint128"
              },
              "referral_code": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "check_referral_code"
        ],
        "properties": {
          "check_referral_code": {
            "type": "object",
            "required": [
              "referral_code"
            ],
            "properties": {
              "referral_code": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_user_info"
        ],
        "properties": {
          "get_user_info": {
            "type": "object",
            "required": [
              "user"
            ],
            "properties": {
              "user": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "all_nft_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllNftInfoResponse_for_Nullable_Empty",
      "type": "object",
      "required": [
        "access",
        "info"
      ],
      "properties": {
        "access": {
          "description": "Who can transfer the token",
          "allOf": [
            {
              "$ref": "#/definitions/OwnerOfResponse"
            }
          ]
        },
        "info": {
          "description": "Data on the token itself,",
          "allOf": [
            {
              "$ref": "#/definitions/NftInfoResponse_for_Nullable_Empty"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "description": "When the Approval expires (maybe Expiration::never)",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "spender": {
              "description": "Account that can transfer/send the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Empty": {
          "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
          "type": "object"
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "NftInfoResponse_for_Nullable_Empty": {
          "type": "object",
          "properties": {
            "extension": {
              "description": "You can add any custom metadata here when you extend cw721-base",
              "anyOf": [
                {
                  "$ref": "#/definitions/Empty"
                },
                {
                  "type": "null"
                }
              ]
            },
            "token_uri": {
              "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "OwnerOfResponse": {
          "type": "object",
          "required": [
            "approvals",
            "owner"
          ],
          "properties": {
            "approvals": {
              "description": "If set this address is approved to transfer/send the token as well",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Approval"
              }
            },
            "owner": {
              "description": "Owner of the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_operators": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OperatorsResponse",
      "type": "object",
      "required": [
        "operators"
      ],
      "properties": {
        "operators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Approval"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "description": "When the Approval expires (maybe Expiration::never)",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "spender": {
              "description": "Account that can transfer/send the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokensResponse",
      "type": "object",
      "required": [
        "tokens"
      ],
      "properties": {
        "tokens": {
          "description": "Contains all token_ids in lexicographical ordering If there are more than `limit`, use `start_from` in future queries to achieve pagination.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "approval": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ApprovalResponse",
      "type": "object",
      "required": [
        "approval"
      ],
      "properties": {
        "approval": {
          "$ref": "#/definitions/Approval"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "description": "When the Approval expires (maybe Expiration::never)",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "spender": {
              "description": "Account that can transfer/send the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "approvals": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ApprovalsResponse",
      "type": "object",
      "required": [
        "approvals"
      ],
      "properties": {
        "approvals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Approval"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "description": "When the Approval expires (maybe Expiration::never)",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "spender": {
              "description": "Account that can transfer/send the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "cal_mint_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CalMintInfoResponse",
      "type": "object",
      "required": [
        "mint_discount_rate",
        "paid_amount",
        "price"
      ],
      "properties": {
        "current_inviter_reward_level": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint8",
          "minimum": 0.0
        },
        "inviter": {
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "mint_discount_rate": {
          "$ref": "#/definitions/Uint128"
        },
        "next_inviter_reward_level": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint8",
          "minimum": 0.0
        },
        "paid_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "price": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "check_referral_code": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CheckReferralCodeResponse",
      "type": "object",
      "required": [
        "exists",
        "user"
      ],
      "properties": {
        "exists": {
          "type": "boolean"
        },
        "user": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "contract_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContractInfoResponse",
      "type": "object",
      "required": [
        "name",
        "symbol"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "get_user_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserInfoResponse",
      "type": "object",
      "required": [
        "current_reward_level",
        "invitee_count",
        "inviter",
        "inviter_referral_code",
        "last_mint_discount_rate",
        "referral_code",
        "user_referral_level_count",
        "user_referral_total_amount",
        "user_reward_box",
        "user_reward_token_type",
        "user_reward_total_base_amount"
      ],
      "properties": {
        "current_reward_level": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "invitee_count": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "inviter": {
          "$ref": "#/definitions/Addr"
        },
        "inviter_referral_code": {
          "type": "string"
        },
        "last_mint_discount_rate": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "referral_code": {
          "type": "string"
        },
        "user_referral_level_count": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "user_referral_total_amount": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "user_reward_box": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "user_reward_token_type": {
          "type": "string"
        },
        "user_reward_total_base_amount": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "minter": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MinterResponse",
      "description": "Shows who can mint these tokens",
      "type": "object",
      "properties": {
        "minter": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "nft_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NftInfoResponse_for_Nullable_Empty",
      "type": "object",
      "properties": {
        "extension": {
          "description": "You can add any custom metadata here when you extend cw721-base",
          "anyOf": [
            {
              "$ref": "#/definitions/Empty"
            },
            {
              "type": "null"
            }
          ]
        },
        "token_uri": {
          "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Empty": {
          "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
          "type": "object"
        }
      }
    },
    "num_tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NumTokensResponse",
      "type": "object",
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "operator": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OperatorResponse",
      "type": "object",
      "required": [
        "approval"
      ],
      "properties": {
        "approval": {
          "$ref": "#/definitions/Approval"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "description": "When the Approval expires (maybe Expiration::never)",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "spender": {
              "description": "Account that can transfer/send the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "owner_of": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OwnerOfResponse",
      "type": "object",
      "required": [
        "approvals",
        "owner"
      ],
      "properties": {
        "approvals": {
          "description": "If set this address is approved to transfer/send the token as well",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Approval"
          }
        },
        "owner": {
          "description": "Owner of the token",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "description": "When the Approval expires (maybe Expiration::never)",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "spender": {
              "description": "Account that can transfer/send the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "query_all_referral_reward_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ReferralRewardConfigResponse",
      "type": "object",
      "required": [
        "referral_level_config",
        "referral_reward_box_total",
        "referral_reward_total_base_amount",
        "reward_token_config"
      ],
      "properties": {
        "referral_level_config": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ReferralLevelConfigResponse"
          }
        },
        "referral_reward_box_total": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "referral_reward_total_base_amount": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "reward_token_config": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ReferralRewardTokenConfigResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ReferralLevelConfigResponse": {
          "type": "object",
          "required": [
            "invitee_discount_rate",
            "inviter_reward_rate",
            "max_referral_total_amount",
            "min_referral_total_amount",
            "reward_box_config"
          ],
          "properties": {
            "invitee_discount_rate": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "inviter_reward_rate": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "max_referral_total_amount": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "min_referral_total_amount": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "reward_box_config": {
              "$ref": "#/definitions/ReferralLevelRewardBoxConfigResponse"
            }
          },
          "additionalProperties": false
        },
        "ReferralLevelRewardBoxConfigResponse": {
          "type": "object",
          "required": [
            "recommended_quantity",
            "reward_box"
          ],
          "properties": {
            "recommended_quantity": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "reward_box": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        },
        "ReferralRewardTokenConfigResponse": {
          "type": "object",
          "required": [
            "conversion_ratio",
            "reward_token"
          ],
          "properties": {
            "conversion_ratio": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "reward_token": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "query_blind_box_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BlindBoxConfigResponse",
      "type": "object",
      "required": [
        "can_transfer_time",
        "gov",
        "inviter_reward_box_contract",
        "level_infos",
        "nft_base_url",
        "nft_uri_suffix",
        "price_token",
        "receiver_price_addr",
        "start_mint_time",
        "token_id_index",
        "token_id_prefix"
      ],
      "properties": {
        "can_transfer_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "gov": {
          "type": "string"
        },
        "inviter_reward_box_contract": {
          "$ref": "#/definitions/Addr"
        },
        "level_infos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlindBoxConfigLevelResponse"
          }
        },
        "nft_base_url": {
          "type": "string"
        },
        "nft_uri_suffix": {
          "type": "string"
        },
        "price_token": {
          "type": "string"
        },
        "receiver_price_addr": {
          "$ref": "#/definitions/Addr"
        },
        "start_mint_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "token_id_index": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "token_id_prefix": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "BlindBoxConfigLevelResponse": {
          "type": "object",
          "required": [
            "level_index",
            "mint_total_count",
            "minted_count",
            "price",
            "received_total_amount"
          ],
          "properties": {
            "level_index": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "mint_total_count": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "minted_count": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "price": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "received_total_amount": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "query_blind_box_config_level": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BlindBoxConfigLevelResponse",
      "type": "object",
      "required": [
        "level_index",
        "mint_total_count",
        "minted_count",
        "price",
        "received_total_amount"
      ],
      "properties": {
        "level_index": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "mint_total_count": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "minted_count": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "price": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "received_total_amount": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "query_blind_box_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BlindBoxInfoResponse",
      "type": "object",
      "required": [
        "block_number",
        "is_random_box",
        "is_reward_box",
        "level_index",
        "price",
        "token_id"
      ],
      "properties": {
        "block_number": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "is_random_box": {
          "type": "boolean"
        },
        "is_reward_box": {
          "type": "boolean"
        },
        "level_index": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "price": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "token_id": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "query_blind_box_infos": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_BlindBoxInfoResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/BlindBoxInfoResponse"
      },
      "definitions": {
        "BlindBoxInfoResponse": {
          "type": "object",
          "required": [
            "block_number",
            "is_random_box",
            "is_reward_box",
            "level_index",
            "price",
            "token_id"
          ],
          "properties": {
            "block_number": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "is_random_box": {
              "type": "boolean"
            },
            "is_reward_box": {
              "type": "boolean"
            },
            "level_index": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "price": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "query_inviter_records": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InviterReferralRecordResponse",
      "type": "object",
      "required": [
        "invitee",
        "invitee_index",
        "mint_box_level_index",
        "mint_pay_amount",
        "mint_price",
        "mint_time",
        "reward_level",
        "reward_to_inviter_base_amount",
        "token_ids"
      ],
      "properties": {
        "invitee": {
          "$ref": "#/definitions/Addr"
        },
        "invitee_index": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "mint_box_level_index": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "mint_pay_amount": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "mint_price": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "mint_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "reward_level": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "reward_to_inviter_base_amount": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "token_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokensResponse",
      "type": "object",
      "required": [
        "tokens"
      ],
      "properties": {
        "tokens": {
          "description": "Contains all token_ids in lexicographical ordering If there are more than `limit`, use `start_from` in future queries to achieve pagination.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    }
  }
}
